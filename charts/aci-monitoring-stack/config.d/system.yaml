class_queries:
  fabric_node_info:
    # Get all the fabric nodes (Controllers, Spines and Leaves)
    class_name: fabricNode
    query_parameter: '?order-by=fabricNode.dn'
    metrics:
      - name: fabric_node
        # In this case we are not looking for a value just the labels for info
        type: "gauge"
        help: "Returns the info of the infrastructure node"
        unit: "info"
        value_name: fabricNode.attributes.fabricSt
        value_transform:
          'active': 1
          'inactive': 2
          'disabled': 3
          'discovering': 4
          'undiscovered': 5
          'unsupported': 6
          'unknown': 7
          'decommissioned': 8
          'maintenance': 9
          'commissioned': 10
    labels:
      - property_name: fabricNode.attributes.name
        regex: "^(?P<name>.*)"
      - property_name: fabricNode.attributes.address
        regex: "^(?P<ip>.*)"
      - property_name: fabricNode.attributes.role
        regex: "^(?P<role>.*)"
      - property_name: fabricNode.attributes.serial
        regex: "^(?P<serial>.*)"
      - property_name: fabricNode.attributes.model
        regex: "^(?P<model>.*)"
      - property_name: fabricNode.attributes.version
        regex: "^(?:n9000-)?(?P<version>.*)"
      - property_name: fabricNode.attributes.dn
        regex: "^topology/pod-(?P<podid>[1-9][0-9]*)/node-(?P<nodeid>[1-9][0-9]*)"

  max_capacity:
    class_name: fvcapRule
    query_parameter: '?order-by=fvcapRule.dn'
    # fvcapRule filtering seems to be broken... so we need to filter the results in 
    # the exporter itself, I only care about fabric wide metrics so no node-id
    #query_parameter: '?query-target-filter=wcard(fvcapRule.dn,"^uni/.*")'
    metrics:
      - name: max_capacity
        value_name: fvcapRule.attributes.constraint
        type: gauge
        help: Returns the max capacity of the fabric
    labels:
      - property_name: fvcapRule.attributes.subj
        regex: "^(?P<class>.*)"
      - property_name: fvcapRule.attributes.dn
        regex: "^topology/pod-(?P<podid>[1-9][0-9]*)/node-(?P<nodeid>[1-9][0-9]*)"
      - property_name: fvcapRule.attributes.dn
        # This is used as a workaround so I can set the nodeid == fabric to detect fabric wide metrics
        regex: "^uni/(?P<nodeid>.*)/compcat-default"

  max_global_pctags:
    class_name: fvcapNSRule
    query_parameter: '?order-by=fvcapNSRule.dn'
    # fvcapNSRule filtering seems to be broken... so we need to filter the results in 
    # the exporter itself, I only care about fabric wide metrics so no node-id
    #query_parameter: '?query-target-filter=wcard(fvcapNSRule.dn,"^uni/.*")'
    metrics:
      - name: max_global_pctag
        value_name: fvcapNSRule.attributes.constraint
        type: gauge
        help: Returns the used capacity for global pctag
    labels:
      - property_name: fvcapNSRule.attributes.dn
        regex: "^topology/pod-(?P<podid>[1-9][0-9]*)/node-(?P<nodeid>[1-9][0-9]*)"
      - property_name: fvcapNSRule.attributes.dn
        # This is used as a workaround so I can set the nodeid == fabric to detect fabric wide metrics
        regex: "^uni/(?P<nodeid>.*)/compcat-default"

  fault_insts:
    class_name: faultInst
    query_parameter: '?order-by=faultInst.dn&query-target-filter=and(not(wcard(faultInst.dn,"__ui_")))'
    metrics:
      - name: faults
        value_name: faultInst.attributes.lastTransition
        # Use the time the profile was applied
        value_regex_transformation: "(?P<lastTransition>.*)"
        value_calculation: "lastTransition"
        help: Returns the faults last transition time
    labels:
      - property_name: faultInst.attributes.ack
        regex: "(?P<ack>.*)"
      - property_name: faultInst.attributes.dn
        regex: "(?P<dn>.*)"
      - property_name: faultInst.attributes.cause
        regex: "(?P<cause>.*)"
      - property_name: faultInst.attributes.created
        regex: "(?P<created>.*)"
      - property_name: faultInst.attributes.descr
        regex: "(?P<descr>.*)"
      - property_name: faultInst.attributes.code
        regex: "(?P<code>.*)"
      - property_name: faultInst.attributes.severity
        regex: "(?P<severity>.*)"
      - property_name: faultInst.attributes.domain
        regex: "(?P<domain>.*)"
      - property_name: faultInst.attributes.type
        regex: "(?P<type>.*)"


compound_queries:
  object_count:
    classnames:
      - class_name: fvCtx
        # The label value that will be set to the "labelname: class"
        label_value: fvCtx
        query_parameter: '?rsp-subtree-include=count'
      - class_name: fvCEp
        label_value: fvCEp
        query_parameter: '?rsp-subtree-include=count'
      - class_name: fvIp
        label_value: fvIp
        query_parameter: '?rsp-subtree-include=count'
      - class_name: fvAEPg
        label_value: fvAEPg
        query_parameter: '?rsp-subtree-include=count'
        #This counts both ESGs and EPGs and is useful to calculate the numbner of global PCtags
      - class_name: fvEPg
        label_value: fvEPg_Global
        query_parameter: '?rsp-subtree-include=count&query-target-filter=lt(fvEPg.pcTag,"16384")'
      - class_name: fvESg
        label_value: fvESg
        query_parameter: '?rsp-subtree-include=count'
      - class_name: fvBD
        label_value: fvBD
        query_parameter: '?rsp-subtree-include=count'
      - class_name: fvTenant
        label_value: fvTenant
        query_parameter: '?rsp-subtree-include=count'
      - class_name: vnsCDev
        label_value: vnsCDev
        query_parameter: '?rsp-subtree-include=count'
      - class_name: vnsGraphInst
        label_value: vnsGraphInst
        query_parameter: '?rsp-subtree-include=count'
      - class_name: eqptLC
        label_value: eqptLC
        query_parameter: '?rsp-subtree-include=count'
      - class_name: coopEpRec
        label_value: coopRemoteEp
        query_parameter: '?rsp-subtree-include=count&query-target-filter=or(eq(coopEpRec.remoteType,"msite"),eq(coopEpRec.remoteType,"ext_fab"))'
    labelname: class
    metrics:
      - name: object_instances
        value_name: moCount.attributes.count
        type: gauge
        help: Returns the current count of objects for ACI classes

  node_count:
    classnames:
      - class_name: topSystem
        label_value: spine
        query_parameter: '?query-target-filter=eq(topSystem.role,"spine")&rsp-subtree-include=count'
      - class_name: topSystem
        label_value: leaf
        query_parameter: '?query-target-filter=eq(topSystem.role,"leaf")&rsp-subtree-include=count'
      - class_name: topSystem
        label_value: controller
        query_parameter: '?query-target-filter=eq(topSystem.role,"controller")&rsp-subtree-include=count'
    labelname: type
    metrics:
      - name: nodes
        value_name: moCount.attributes.count
        type: gauge
        help: Returns the current count of nodes

# Group class queries
group_class_queries:
  # Gather all different health related metrics
  health:
    name: health
    unit: ratio
    type: gauge
    help: Returns health score
    queries:
      - node_health:
        class_name: topSystem
        query_parameter: "?rsp-subtree-include=health"
        metrics:
          - value_name: topSystem.children.@reverse.0.healthInst.attributes.cur
            value_calculation: "value / 100"
        labels:
          - property_name: topSystem.attributes.dn
            regex: "^topology/pod-(?P<podid>[1-9][0-9]*)/node-(?P<nodeid>[1-9][0-9]*)/sys"
          - property_name: topSystem.attributes.state
            regex: "^(?P<state>.*)"
          - property_name: topSystem.attributes.oobMgmtAddr
            regex: "^(?P<oobMgmtAddr>.*)"
          - property_name: topSystem.attributes.name
            regex: "^(?P<name>.*)"
          - property_name: topSystem.attributes.role
            regex: "^(?P<role>.*)"
        # A label for the class query
        staticlabels:
          - key: class
            value: topSystem

      - fabric_health:
        class_name: fabricHealthTotal
        query_parameter: '?query-target-filter=wcard(fabricHealthTotal.dn,"topology/.*/health")'
        metrics:
          - value_name: fabricHealthTotal.attributes.cur
            value_calculation: "value / 100"
        labels:
          - property_name: fabricHealthTotal.attributes.dn
            regex: "^topology/pod-(?P<podid>[1-9][0-9]*)/health"
        staticlabels:
          - key: class
            value: fabricHealthTotal

      - contract:
        class_name: fvCtx
        query_parameter: '?rsp-subtree-include=health,required'
        metrics:
          - value_name: fvCtx.children.[healthInst].attributes.cur
            value_calculation: "value / 100"
        labels:
          - property_name: fvCtx.attributes.dn
            regex: "^uni/tn-(?P<tenant>.*)/ctx-(?P<ctx>.*)"
        staticlabels:
          - key: class
            value: fvCtx

      - bridge_domain_health_by_label:
        class_name: fvBD
        query_parameter: '?rsp-subtree-include=health,required'
        metrics:
          - value_name: fvBD.children.[healthInst].attributes.cur
            value_calculation: "value / 100"
        labels:
          - property_name: fvBD.attributes.dn
            regex: "^uni/tn-(?P<tenant>.*)/BD-(?P<bd>.*)"
        staticlabels:
          - key: class
            value: fvBD

      - tenant:
        class_name: fvTenant
        query_parameter: '?rsp-subtree-include=health,required'
        metrics:
          - value_name: fvTenant.children.[healthInst].attributes.cur
            value_calculation: "value / 100"
        labels:
          - property_name: fvTenant.attributes.dn
            regex: "^(?P<tenant>.*)"
        staticlabels:
          - key: class
            value: fvTenant

      - ap:
        class_name: fvAp
        query_parameter: '?rsp-subtree-include=health,required'
        metrics:
          - value_name: fvAp.children.[healthInst].attributes.cur
            value_calculation: "value / 100"
        labels:
          - property_name: fvAp.attributes.dn
            regex: "^uni/tn-(?P<tenant>.*)/ap-(?P<app>.*)"
        staticlabels:
          - key: class
            value: fvAp

      - aepg:
        class_name: fvAEPg
        query_parameter: '?rsp-subtree-include=health,required'
        metrics:
          - value_name: fvAEPg.children.[healthInst].attributes.cur
            value_calculation: "value / 100"
        labels:
          - property_name: fvAEPg.attributes.dn
            regex: "^uni/tn-(?P<tenant>.*)/(?:ap|mgmtp)-(?P<app>.*)/(?:epg|inb)-(?P<epg>.*)"
        staticlabels:
          - key: class
            value: fvAEPg


