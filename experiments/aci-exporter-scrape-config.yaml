apiVersion: monitoring.coreos.com/v1alpha1
kind: ScrapeConfig
metadata:
  name: {{ include "aci-monitoring-stack.name" . }}-fabric
  labels:
    release: {{ $.Release.Name | quote }}
spec:
  scrapeTimeout: 30s
  scrapeInterval: 1m
  metricsPath: /probe
  params:
      # List of the queries to execute on the fabric level. They need to match the aci-exporter config
      # DO NOT INSERT SPACES and use \ for next line or aci-exporter will not be able to parse the queries
    queries:
      - "health,fabric_node_info,object_count,max_capacity,\
        vlans,static_binding_info,dynamic_binding_info,\
        epg_port_vlan_binding,epg_port_vxlan_binding,\
        ps_power_usage,apic_hw_sensors,uptime_topsystem"
  httpSDConfigs:
    - url: http://{{ include "aci-monitoring-stack.name" . }}-aci-exporter:{{ .Values.config.port }}/sd
      refreshInterval: 5m
  relabelings:
    - sourceLabels: [ __meta_role ]
      # This config executes the queries at the "fabric" level and is used to probe any of the APICs 
      # to get metrics about all the devices in the fabric. A classic use case is to get for example the vlan pools
      # the status of the nodes or the scale profile for the whole fabric etc... 
      regex: "aci_exporter_fabric"
      action: "keep"
    - sourceLabels: [ __address__ ]
      targetLabel: __param_target
    - sourceLabels: [ __param_target ]
      targetLabel: instance
    - sourceLabels: [ __meta_url ] 
      regex: https?://(.*)/.*
      replacement: "$1"
      targetLabel: __address__
---
apiVersion: monitoring.coreos.com/v1alpha1
kind: ScrapeConfig
metadata:
  name: {{ include "aci-monitoring-stack.name" . }}-nodes
  labels:
    release: {{ $.Release.Name | quote }}
spec:
  params:
    # List of the queries to execute on the switches. They need to match the aci-exporter config
    # DO NOT INSERT SPACES and use \ for next line or aci-exporter will not be able to parse the queries
    queries: 
      - "node_bgp_peers,node_bgp_peers_af,node_interface_info,\
        node_interface_rx_stats,node_interface_rx_err_stats,\
        node_interface_tx_stats,node_interface_tx_err_stats,\
        node_cpu,node_memory,node_hw_sensors,\
        node_scale_profiles,node_active_scale_profile,node_tcam_current,\
        node_labels_current,node_mac_current,node_ipv4_current,\
        node_ipv6_current,node_mcast_current,node_vlan_current,\
        node_lpm_current,node_slash32_current,node_slash128_current,\
        node_scale_ctx,node_ospf_neighbors,node_cpu,node_memory,\
        node_fru_power_usage,node_temperature"

  scrapeTimeout: 30s
  scrapeInterval: 1m
  metricsPath: /probe
  httpSDConfigs:
    - url: http://{{ include "aci-monitoring-stack.name" . }}-aci-exporter:{{ .Values.config.port }}/sd
      refreshInterval: 5m
  relabelings:
    - sourceLabels: [ __meta_role ]
      # Include Only the Switches, this is used to execute the queries on all the switches in the fabric
      # but not on the APIC, for example the APIC have no TCAM so we need to exclude them.
      regex: "(spine|leaf)"
      action: "keep"

    # Get the target (Fabric Name) param from __address__ that is <fabric>#<oobMgmtAddr> by default
    - sourceLabels: [ __address__ ]
      separator: "#"
      regex: (.*)#(.*)
      replacement: "$1"
      targetLabel: __param_target
    
    # Get the node Address param from __address__ that is <fabric>#<oobMgmtAddr> by default
    - sourceLabels: [ __address__ ]
      separator: "#"
      regex: (.*)#(.*)
      replacement: "$2"
      targetLabel: __param_node
    # Get the aci-exporter URL from the service discovery URL
    - sourceLabels: [ __meta_url ]
      regex: https?://(.*)/.*
      replacement: "$1"
      targetLabel: __address__

    # Set instance to the ip/hostname from the __param_node
    - sourceLabels: [ __param_node ]
      targetLabel: instance

    # Add labels from discovery
    - sourceLabels: [ __meta_fabricDomain ]
      targetLabel: aci
    - sourceLabels: [ __meta_id ]
      targetLabel: nodeid
    - sourceLabels: [ __meta_podId ]
      targetLabel: podid
    - sourceLabels: [ __meta_role ]
      targetLabel: role
    - sourceLabels: [ __meta_name ]
      targetLabel: name